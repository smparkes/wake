#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__) + '/../lib/wake') # FIXME

require 'pathname'
require 'optparse'

require 'rubygems'
require 'wake/event_handlers/em'
require 'wake/deps'
require 'wake'

module Wake
  # Namespaced to avoid defining global methods
  module Bin #:nodoc:
    extend self

    def usage
      "Usage: wake [opts] [path/to/script]"
    end

    def version
      "wake version: %s" % Wake::VERSION
    end

    def find_in_load_path(path)
      dir = potentially_with_gem( path.basename('.wk') ) do
        $LOAD_PATH.detect {|p| Pathname(p).join(path).exist? }
      end
      dir ? path.expand_path(dir) : nil
    end

    private

    def potentially_with_gem(name)
      yield || (require(name) && yield)
    rescue LoadError
      nil
    end
  end
end

opts = OptionParser.new do |opts|
  opts.banner = Wake::Bin.usage

  opts.on('-d', '--debug', "Print extra debug info while program runs") {
    Wake.options.debug = true
    begin
      require 'ruby-debug'
    rescue LoadError, RuntimeError
    end
  }

  opts.on('-1', '--once', "Run load patterns and then exit") {
    Wake.options.once = true
  }

  opts.on('-f', '--wakefile FILE', "use wakefile FILE") { |file|
    Wake.options.wakefile = file
  }

  opts.on_tail('-h', '--help', "Print inline help") { puts opts; exit }
  opts.on_tail('-v', '--version', "Print version" ) { puts Wake::Bin.version; exit }

  opts.parse! ARGV
end

$paths = ARGV.inject({}) do |hash,fn|
  path = Pathname(fn).realpath.to_s
  hash[path] = path
  hash
end

path = Wake.options.wakefile || "Wakefile"
relative_path = Pathname( path ) rescue abort(Wake::Bin.usage)
Wake::Controller.new(Wake::Script.new(relative_path)).run

